// Retrieve all needed libraries
console.log("Loading packages...")
var GtfsRealtimeBindings = require('gtfs-realtime-bindings');
var request = require('request');
var http = require('http');
var fs = require('fs');
var readLine = require('readline');
var cheerio = require('cheerio');

console.log("Server started!");

var URLbase = 'https://api.transport.nsw.gov.au/v1/';

// What should we call the API with?
var requestSettings = {
  method: 'GET',
  url: 'Should get replaced',
  encoding: null,
  headers: {
    'Authorization': 'apikey <API KEY HERE>'
  }
};

// Get line, only used for JSON fetching
function getLine (file, callback) {
  lineReader = readLine.createInterface({
    input: fs.createReadStream(file)
  });
  // When we get a line, reply with the data
  lineReader.on('line', function (line) {
    callback(line);
  });
}

// Only send a line if it matches a search term
function findLine (file, searchTerm, callback) {
  lineReader = readLine.createInterface({
    input: fs.createReadStream(file)
  });
  // If we get a line and the first bit equals the search term, save it
  lineReader.on('line', function (line) {
    if (line.split(",")[0] == searchTerm) {
      myLine = line;
    }
  });
  // Now that we've finished reading, send it
  lineReader.on('close', function () {
    callback(myLine);
  });
}

// Same as above but save lines that match the search termS
function findLines (file, searchTerms, callback) {
  lines = [];
  lineReader = readLine.createInterface({
    input: fs.createReadStream(file)
  });
  lineReader.on('line', function (line) {
    myIndex = searchTerms.indexOf(line.split(",")[0]);
    // If it is something we're searching for
    if (myIndex != -1) {
      lines[myIndex] = line;
    }
  });
  // When we're done, reply with all lines joined with a pipe
  lineReader.on('close', function () {
    callback(lines.join("|"));
  });
}

function fetchVehicleInfo (callback, vehicle, tripId) {
  data = "";
  requestSettings.url = URLbase + "gtfs/vehiclepos/" + vehicle;
  request(requestSettings, function (error, response, body) {
    // If there aren't any errors
    if (!error && response.statusCode == 200) {
      var feed = GtfsRealtimeBindings.FeedMessage.decode(body);
      try {
        // For each vehicle
        feed.entity.forEach(function(entity) {
          // If it's the one we want info for
          if (entity.vehicle.trip.trip_id == tripId) {
            // Pull the following datas
            data += String(entity.vehicle.position.latitude) + "," +
            String(entity.vehicle.position.longitude) + "," +
            String(entity.vehicle.position.bearing) + "," +
            String(entity.vehicle.position.speed) + "," +
            String(entity.vehicle.trip.start_time) + "," +
            String(entity.vehicle.stop_id) + "," +
            String(entity.vehicle.current_status) + "," +
            String(entity.vehicle.congestion_level) + "," +
            String(entity.vehicle.occupancy_status) + ",";
            // You can't break a for loop in JS... so just throw an error to get out
            throw new TypeError();
          }
        });
      }
      catch (e) {}
    }
    // Now find the rest of the data from the file generated by the update tool
    findLine("assets/vehicledata/" + vehicle + "/info.txt", tripId, function(returnValue) {
      data += returnValue;
      callback(data);
    });
  });
}

// When we want only the positions to display on the map
function fetchPositions (callback, vehicle) {
  requestSettings.url = URLbase + "gtfs/vehiclepos/" + vehicle;
  request(requestSettings, function (error, response, body) {
    // If there aren't errors
    if (!error && response.statusCode == 200) {
      var feed = GtfsRealtimeBindings.FeedMessage.decode(body);
      // For each vehicle
      feed.entity.forEach(function(entity) {
        try {
          // Only get lat,lng,dir and id
          data += String(entity.vehicle.position.latitude) + "," +
          String(entity.vehicle.position.longitude) + "," +
          String(entity.vehicle.position.bearing) + "," +
          String(entity.vehicle.trip.trip_id) + "|";
        }
        catch (e) {console.log("Critical error pulling positions")}
      });
    }
    callback(data);
  });
}

// This is the heart that the main program calls
http.createServer(function (request, response) {
  path = request.url.substring(1);
  response.writeHead(200, {"Content-Type": "text/plain", "Access-Control-Allow-Origin": "*"});
  if (path.startsWith("ping")) {
    console.log("Recieved signal from program");
    response.write("pong");
    response.end();
  }

  else if (path.startsWith("gtfs")) {
    vehicle = path.split("/")[2];
    console.log("Fetching", vehicle, "positions");
    fetchPositions(function(data){
      response.write(data);
      response.end();
      console.log("Fetched", vehicle, "positions");
    }, vehicle);
    data = "";
  }

  else if (path.startsWith("getInfo")) {
    vehicle = path.split(",")[1];
    tripId = path.split(",")[2];
    console.log("Fetching", vehicle, "information");
    fetchVehicleInfo(function(data){
      response.write(data);
      response.end();
      console.log("Fetched", vehicle, "information");
    }, vehicle, tripId);
  }

  else if (path.startsWith("getShape")) {
    vehicle = path.split(",")[1];
    shapeID = path.split(",")[2];
    console.log("Fetching", vehicle, "shape", shapeID);
    findLine("assets/vehicledata/" + vehicle + "/shapes.txt", shapeID, function(data) {
      // We don't want the ID, just the shape info
      response.write(data.substring(data.indexOf(",") + 1, data.length));
      response.end();
      console.log("Fetched", vehicle, "shape", shapeID);
    });
  }

  else if (path.startsWith("getStatus")) {
    console.log("Fetching API status");
    getStatus(function(statusLabels){
      response.write(statusLabels);
      response.end();
      console.log("Fetched API status");
    });
  }

  else if (path.startsWith("getStops")) {
    vehicle = path.split(",")[1];
    searchTerms = path.split(",").slice(2, path.length);
    console.log("Fetching", vehicle, "stops");
    findLines("assets/vehicledata/" + vehicle + "/stops.txt", searchTerms, function (data) {
      response.write(data);
      response.end();
      console.log("Fetched", vehicle, "stops");
    });
  }

  else if (path.startsWith("getJSON")) {
    file = path.split(",")[1];
    console.log("Fetching", file, "JSON");
    getLine("assets/mapstyles/" + file + ".json", function(data) {
      response.write(data);
      response.end();
      console.log("Fetched", file, "JSON");
    });
  }
}).listen(8001);

//
//
//  API status code
//
//

// A helper function used a little later
function indexes (source, find) {
  var result = [];
  for (i = 0; i < source.length; i++) {
    if (source.substring(i, i + find.length) == find) {result.push(i);}
  }
  return result;
}

// We only use these APIs, this checks if we need them
function concersUs (text) {
  if (text.includes("Realtime Timetables") ||
      text.includes("Realtime Vehicle Position") ||
      text.includes("Complete - GTFS") ||
      text.includes("Live Traffic Cameras")) {
  return true;}
}

// When we want the API statuses
function getStatus (callback) {
  url = 'https://opendata.transport.nsw.gov.au/status';
  statusLabels = "";
  request(url, function(error, response, html) {
    if (!error) {
      // If there isn't an error, load the HTML
      var $ = cheerio.load(html);
      // Find all the places in the html where the string "service is down" are
      downLocations = indexes($.html(), "Service is down");
      for (i = 0; i < downLocations.length; i++) {
        b = $.html().substring(downLocations[i] - 130, downLocations[i] + 10); // Find outer text
        c = b.substring(b.indexOf("floating-box\">") + 14, downLocations[i] + 10); // Find the beggining of the service label
        d = c.substring(0, c.indexOf("</div>")); // Find the end of the service label, we end with the full label
        // E.g d = "Public Transport - Realtime Vehicle Position - Buses"
        // If we use that API, add it to the string we are going to reply with
        if (concersUs(d)) {statusLabels += d + ",0|";}
      }
      // Find all the places in the html where the string "service is up" are
      upLocations = indexes($.html(), "Service is up");
      for (i = 0; i < upLocations.length; i++) {
        b = $.html().substring(upLocations[i] - 130, upLocations[i] + 10); // Find outer text
        c = b.substring(b.indexOf("floating-box\">") + 14, upLocations[i] + 10); // Find the beggining of the service label
        d = c.substring(0, c.indexOf("</div>")); // Find the end of the service label, we end with the full label
        if (concersUs(d)) {statusLabels += d + ",1|";}
      }
    }
    // Send the string and status array back to the server
    callback(statusLabels);
  });
}